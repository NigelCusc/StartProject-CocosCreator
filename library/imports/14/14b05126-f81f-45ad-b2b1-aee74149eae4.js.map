{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["cc","Class","Component","properties","pickRadius","onLoad","game","node","parent","getComponent","getPlayerDistance","playerPos","player","getPosition","dist","position","sub","mag","onPicked","spawnNewStar","gainScore","destroy","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACAC,IAAAA,UAAU,EAAE;AAFJ,GAHP;AAQLC,EAAAA,MAAM,EAAE,kBAAW;AACf,SAAKC,IAAL,GAAY,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,YAAjB,CAA8B,MAA9B,CAAZ;AACH,GAVI;AAYLC,EAAAA,iBAAiB,EAAE,6BAAW;AAC1B;AACA,QAAIC,SAAS,GAAG,KAAKL,IAAL,CAAUM,MAAV,CAAiBC,WAAjB,EAAhB,CAF0B,CAG1B;;AACA,QAAIC,IAAI,GAAG,KAAKP,IAAL,CAAUQ,QAAV,CAAmBC,GAAnB,CAAuBL,SAAvB,EAAkCM,GAAlC,EAAX;AACA,WAAOH,IAAP;AACH,GAlBI;AAoBLI,EAAAA,QAAQ,EAAE,oBAAW;AACjB;AACA,SAAKZ,IAAL,CAAUa,YAAV,GAFiB,CAGjB;;AACA,SAAKb,IAAL,CAAUc,SAAV,GAJiB,CAKjB;;AACA,SAAKb,IAAL,CAAUc,OAAV;AACH,GA3BI;AA6BLC,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc;AAClB;AACA,QAAI,KAAKb,iBAAL,KAA2B,KAAKN,UAApC,EAAgD;AAC5C;AACA,WAAKc,QAAL;AACA;AACH,KANiB,CAOlB;;;AACA,QAAIM,YAAY,GAAG,IAAI,KAAKlB,IAAL,CAAUmB,KAAV,GAAgB,KAAKnB,IAAL,CAAUoB,YAAjD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKpB,IAAL,CAAUqB,OAAV,GAAoBD,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWN,YAAY,IAAI,MAAMG,UAAV,CAAvB,CAAjC;AACH;AAxCI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // When the distance between the star and main character is less than this value, collection of the point will be ...\r\n        pickRadius: 0,\r\n    },\r\n\r\n    onLoad: function() {\r\n        this.game = this.node.parent.getComponent('Game');\r\n    },\r\n\r\n    getPlayerDistance: function() {\r\n        // judge the distance according to the position of the player node\r\n        var playerPos = this.game.player.getPosition();\r\n        // calculate the distance between two nodes according to their positions\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\r\n        this.game.spawnNewStar();\r\n        // invoke the scoring method of the Game script\r\n        this.game.gainScore();\r\n        // then destory the current star's node\r\n        this.node.destroy();\r\n    },\r\n\r\n    update: function (dt) {\r\n        // judge if the distance between the star and main character is less than the collecting distance for each frame\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // invode collecting behavior\r\n            this.onPicked();\r\n            return;\r\n        }\r\n        // Update the transparency of the star according to the timer in the Game script\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    },\r\n});\r\n"]}