{"version":3,"sources":["assets\\scripts\\Game.js"],"names":["cc","Class","Component","properties","starPrefab","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","timer","starDuration","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","update","dt","gameOver","gainScore","string","audioEngine","playEffect","stopAllActions","director","loadScene"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // this property quotes the PreFab resource of stars\r\n        starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        // the random scale of disappearing time for stars\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n        // ground node for confirming the height of the generated star's position\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // player node for obtaining the jump height of the main character and controlling the movement switch of the main character\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        scoreDisplay : {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad: function () {\r\n        // Obtain the anchor point of ground level on the y-axis\r\n        this.groundY = this.ground.y + this.ground.height/2; // this.ground.top may also work\r\n        // init timer\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n        // generate a new star\r\n        this.spawnNewStar();\r\n        // init scoring\r\n        this.score = 0;\r\n    },\r\n\r\n    spawnNewStar: function() {\r\n        // generate a new node in the scene with a preset template\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        // put the newly added node under the Canvas node\r\n        this.node.addChild(newStar);\r\n        // set up a random position for the star\r\n        newStar.setPosition(this.getNewStarPosition());\r\n        // Staging a reference of Game object on a star component\r\n        newStar.getComponent('Star').game = this;\r\n\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function() {\r\n        var randX = 0;\r\n        // According to the position of the ground level and the main characters' jump height, randomly obtain an anchor point\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // according to the width of the screen, randomly obtain an anchor point of the star on the x axis\r\n        var maxX = this.node.width/2;\r\n        randX = (Math.random() - 0.5) * 2 * maxX;\r\n        // return to the anchor point of the star\r\n        return cc.v2(randX, randY);\r\n    },\r\n\r\n    update: function (dt) {\r\n        // update timer for each frame, when a new star is not generated after exceeding duration\r\n        // invoke the logic of game failure\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.timer += dt; // Time ticks here\r\n    }, \r\n\r\n    gainScore: function(){\r\n        this.score += 1;\r\n        // update the words of the scoreDisplay Label\r\n        this.scoreDisplay.string = 'Score: ' + this.score;\r\n        // play the scoring sound effect\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n\r\n    gameOver: function(){\r\n        this.player.stopAllActions(); // stop the jumping action of the player node\r\n        cc.director.loadScene('game'); // restart\r\n    }\r\n\r\n    // update (dt) {},\r\n});\r\n"]}